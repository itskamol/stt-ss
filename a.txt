import { Injectable, LoggerService as NestLoggerService } from '@nestjs/common';\nimport * as chalk from 'chalk';\n\n@Injectable()\nexport class SimpleLoggerService implements NestLoggerService {\n    private formatTimestamp(): string {\n        return new Date().toLocaleTimeString('en-US', {\n            hour12: false,\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n        });\n    }\n\n    log(message: any, context?: string): void {\n        const timestamp = chalk.gray(`[${this.formatTimestamp()}]`);\n        const level = chalk.blue.bold('INFO');\n        const ctx = context ? chalk.green(`[${context}]`) : '';\n        console.log(`${timestamp} ${level} ${message} ${ctx}`);\n    }\n\n    error(message: any, trace?: string, context?: string): void {\n        const timestamp = chalk.gray(`[${this.formatTimestamp()}]`);\n        const level = chalk.red.bold('ERROR');\n        const ctx = context ? chalk.green(`[${context}]`) : '';\n        console.error(`${timestamp} ${level} ${message} ${ctx}`);\n        if (trace) {\n            console.error(chalk.red(trace));\n        }\n    }\n\n    warn(message: any, context?: string): void {\n        const timestamp = chalk.gray(`[${this.formatTimestamp()}]`);\n        const level = chalk.yellow.bold('WARN');\n        const ctx = context ? chalk.green(`[${context}]`) : '';\n        console.warn(`${timestamp} ${level} ${message} ${ctx}`);\n    }\n\n    debug(message: any, context?: string): void {\n        const timestamp = chalk.gray(`[${this.formatTimestamp()}]`);\n        const level = chalk.magenta.bold('DEBUG');\n        const ctx = context ? chalk.green(`[${context}]`) : '';\n        console.debug(`${timestamp} ${level} ${message} ${ctx}`);\n    }\n\n    verbose(message: any, context?: string): void {\n        const timestamp = chalk.gray(`[${this.formatTimestamp()}]`);\n        const level = chalk.cyan.bold('VERBOSE');\n        const ctx = context ? chalk.green(`[${context}]`) : '';\n        console.log(`${timestamp} ${level} ${message} ${ctx}`);\n    }\n}\n"
