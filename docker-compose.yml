services:
  postgres:
    image: postgres:15-alpine
    container_name: ${COMPOSE_PROJECT_NAME}-postgres-${ENVIRONMENT}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    # ports:
    #   - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - main-network
    init: true
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
      disable: false

  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME}-redis-${ENVIRONMENT}
    # ports:
    #   - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - main-network
    init: true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      disable: false

  migration:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ${COMPOSE_PROJECT_NAME}-migration-${ENVIRONMENT}
    environment:
      DATABASE_URL: ${DATABASE_URL}
    volumes:
      - .:/app:cached
      - node_modules_volume:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - main-network
    command: ["sh", "-c", "pnpm run db:generate && pnpm run db:migrate"]
    init: true
    restart: "no"
    profiles:
      - migration

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ${COMPOSE_PROJECT_NAME}-app-${ENVIRONMENT}
    environment:
      NODE_ENV: ${ENVIRONMENT}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      PORT: ${PORT}
    volumes:
      - .:/app:cached
      - node_modules_volume:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - main-network
    init: true
    restart: unless-stopped
    command: ["sh", "-c", "pnpm run db:generate && pnpm run start:dev"]

volumes:
  postgres_data:
    name: ${COMPOSE_PROJECT_NAME}_postgres_data_${ENVIRONMENT}
  redis_data:
    name: ${COMPOSE_PROJECT_NAME}_redis_data_${ENVIRONMENT}
  node_modules_volume:

networks:
  main-network:
    name: ${COMPOSE_PROJECT_NAME}_network_${ENVIRONMENT}