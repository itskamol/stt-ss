// This is your Prisma schema file,  
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GuestStatus {
  PENDING_APPROVAL
  APPROVED
  ACTIVE
  COMPLETED
  EXPIRED
  REJECTED
}

enum AccessCredentialType {
  QR_CODE
  TEMP_CARD
  FACE
}

enum Role {
  SUPER_ADMIN
  ORG_ADMIN
  BRANCH_MANAGER
  EMPLOYEE
}

enum DeviceType {
  CAMERA
  CARD_READER
  FINGERPRINT
  ANPR
  ACCESS_CONTROL
  OTHER
}

enum DeviceStatus {
  ONLINE
  OFFLINE
  ERROR
  MAINTENANCE
}

enum DeviceProtocol {
  HTTP
  HTTPS
  TCP
  UDP
  SDK
}

enum DeviceAuthType {
  BASIC
  DIGEST
  API_KEY
  CERTIFICATE
}

enum AttendanceEventType {
  CHECK_IN
  CHECK_OUT
  GUEST_CHECK_IN
  GUEST_CHECK_OUT
  MANUAL_ENTRY
}

enum ReportType {
  DAILY_ATTENDANCE
  WEEKLY_ATTENDANCE
  MONTHLY_ATTENDANCE
  EMPLOYEE_LIST
  DEVICE_STATUS
  GUEST_VISITS
  SECURITY_AUDIT
  CUSTOM_QUERY
}

enum ReportFormat {
  CSV
  PDF
  EXCEL
  JSON
}

enum EventType {
  CARD_SCAN
  FINGERPRINT_SCAN
  FACE_RECOGNITION
  DOOR_OPEN
  DOOR_CLOSE
  ALARM
  TAMPER
  NETWORK_ERROR
  ACCESS_GRANTED
  ACCESS_DENIED
}

enum ParameterFormatType {
  JSON
  XML
  QUERY_STRING
}

enum EmployeeSyncStatus {
  PENDING
  SYNCED
  FAILED
  RETRYING
}

enum EmployeeSyncType {
  ADD
  UPDATE
  REMOVE
}

enum ReportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// 1. Core organization model  
model Organization {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users           OrganizationUser[]
  branches        Branch[]
  employees       Employee[]
  devices         Device[]
  guestVisits     GuestVisit[]
  auditLogs       AuditLog[]
  reports         Report[]
  deviceTemplates DeviceTemplate[]
  attendances     Attendance[]
}

// 2. Users and their roles  
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  fullName     String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  organizationLinks OrganizationUser[]
  auditLogs         AuditLog[]
  reports           Report[]
}

model OrganizationUser {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  role           Role

  // This link shows which branch(es) this user manages  
  managedBranches ManagedBranch[]

  createdAt DateTime @default(now())

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([userId])
}

// 3. Organization branches (locations)  
model Branch {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  name           String
  address        String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  departments Department[]
  employees   Employee[]
  devices     Device[]
  guestVisits GuestVisit[]
  attendances Attendance[]

  // This link shows which manager(s) manage this branch  
  managers ManagedBranch[]

  @@unique([organizationId, name])
  @@index([organizationId])
}

// 3.1. Many-to-many join table between Manager and Branch  
model ManagedBranch {
  id         String           @id @default(uuid())
  manager    OrganizationUser @relation(fields: [managerId], references: [id], onDelete: Cascade)
  managerId  String
  branch     Branch           @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId   String
  assignedAt DateTime         @default(now())

  @@unique([managerId, branchId])
  @@index([managerId])
  @@index([branchId])
}

// 4. Departments within a branch  
model Department {
  id       String       @id @default(uuid())
  branch   Branch       @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId String
  name     String
  parentId String? // For internal hierarchy (self-relation)  
  parent   Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children Department[] @relation("DepartmentHierarchy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employees Employee[]
  devices   Device[]

  @@unique([branchId, name])
  @@index([branchId])
}

// 5. Employees  
model Employee {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  branch         Branch       @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId       String
  department     Department?  @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  departmentId   String?

  firstName    String
  lastName     String
  employeeCode String // Must be unique within the organization  
  email        String? @unique
  phone        String?
  photoKey     String?
  isActive     Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  attendances         Attendance[]
  responsibleForGuests GuestVisit[]

  @@unique([organizationId, employeeCode])
  @@index([organizationId])
  @@index([branchId])
  @@index([departmentId])
}

// 6. Devices  
model Device {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  branch         Branch       @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId       String
  department     Department?  @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  departmentId   String?

  name             String
  type             DeviceType
  host             String?
  username         String?
  password         String? // Encrypted
  port             Int?           @default(80)
  protocol         DeviceProtocol @default(HTTP)
  macAddress       String?        @unique
  manufacturer     String?
  model            String?
  firmware         String?
  description      String?
  status           DeviceStatus   @default(OFFLINE)
  isActive         Boolean        @default(true)
  lastSeen         DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events          DeviceEventLog[]
  attendances     Attendance[]
  deviceTemplates DeviceTemplate[]
  configuration   DeviceConfiguration?
  webhooks        DeviceWebhook[]

  @@unique([organizationId, name])
  @@index([branchId, status])
  @@index([host])
}

// 7. Guest visits  
model GuestVisit {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  branch         Branch       @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId       String

  guestName             String
  guestContact          String?
  responsibleEmployeeId String? // Employee.id  

  scheduledEntryTime DateTime
  scheduledExitTime  DateTime

  status               GuestStatus          @default(PENDING_APPROVAL)
  accessCredentialType AccessCredentialType
  accessCredentialHash String? // Hashed value for QR code or temporary card  

  createdByUserId String // User.id  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  attendances           Attendance[]
  responsibleEmployee   Employee? @relation(fields: [responsibleEmployeeId], references: [id], onDelete: SetNull)

  @@index([branchId, status])
  @@index([accessCredentialHash])
}

// 8. Attendance  
model Attendance {
  id             String @id @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  branchId       String
  branch         Branch       @relation(fields: [branchId], references: [id], onDelete: Cascade)

  employee   Employee?   @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  employeeId String?
  guestVisit GuestVisit? @relation(fields: [guestId], references: [id], onDelete: SetNull)
  guestId    String?
  device     Device?     @relation(fields: [deviceId], references: [id], onDelete: SetNull)
  deviceId   String?

  eventType AttendanceEventType
  timestamp DateTime            @default(now())
  meta      Json? // Additional information (e.g., temperature)  

  createdAt DateTime @default(now())

  @@index([organizationId, employeeId, timestamp])
  @@index([organizationId, guestId, timestamp])
}

// 9. Events and Audit logs  
model DeviceEventLog {
  id             String @id @default(uuid())
  organizationId String
  deviceId       String
  device         Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  eventType     EventType
  timestamp     DateTime
  rawPayloadUrl String? // Reference to the raw data in S3/MinIO  
  metadata      Json? // Processed data  
  isProcessed   Boolean   @default(false)

  createdAt DateTime @default(now())

  @@index([organizationId, deviceId, timestamp])
}

model AuditLog {
  id             String        @id @default(uuid())
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  action     String // e.g.: "CREATE_EMPLOYEE"  
  resource   String // "Employee"  
  resourceId String?
  method     String
  url        String
  userAgent  String?
  ipAddress  String?

  requestData  Json?
  responseData Json?
  status       String
  duration     Int
  timestamp    DateTime

  errorMessage String?
  errorStack   String?
  oldValues    Json?
  newValues    Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId, userId, timestamp])
  @@index([resource, resourceId])
  @@index([status, timestamp])
}

// 10. Reports
model Report {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  name       String
  type       ReportType
  format     ReportFormat @default(CSV)
  status     ReportStatus @default(PENDING)
  parameters Json?

  createdByUser   User   @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  createdByUserId String

  fileUrl     String?
  filePath    String?
  fileSize    Int?
  recordCount Int?

  startedAt    DateTime?
  completedAt  DateTime?
  errorMessage String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId, type, status])
  @@index([createdByUserId, createdAt])
}

// 11. Device Templates
model DeviceTemplate {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  name         String
  manufacturer String
  model        String

  // Default settings as JSON
  defaultSettings Json?

  // API endpoints mapping
  endpoints Json?

  // Feature capabilities
  capabilities Json?

  // Communication protocol
  protocol Json?

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  devices Device[]

  @@unique([organizationId, name])
}

// 12. Device Configuration
model DeviceConfiguration {
  id       String @id @default(uuid())
  deviceId String @unique
  device   Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  // Network settings
  networkDhcp     Boolean  @default(true)
  networkStaticIp String?
  networkSubnet   String?
  networkGateway  String?
  networkDns      String[] // Array of DNS servers

  // Time settings
  timezone     String  @default("UTC")
  ntpServer    String?
  syncInterval Int     @default(60) // minutes

  // Access control
  defaultAccessLevel Int     @default(1)
  allowUnknownCards  Boolean @default(false)
  offlineMode        Boolean @default(true)
  maxUsers           Int     @default(1000)

  // Biometric settings
  biometricThreshold  Int?    @default(5) // 1-9
  duressFingerEnabled Boolean @default(false)
  antiPassbackEnabled Boolean @default(false)

  // Event settings
  eventBufferSize Int @default(1000)
  uploadInterval  Int @default(30) // seconds
  retryAttempts   Int @default(3)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 13. Employee Device Sync
model EmployeeDeviceSync {
  id             String @id @default(uuid())
  deviceId       String
  employeeId     String
  organizationId String

  syncStatus    EmployeeSyncStatus @default(PENDING)
  syncType      EmployeeSyncType   @default(ADD)
  errorMessage  String?
  syncAttempted DateTime?
  syncedAt      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([deviceId, employeeId])
  @@index([organizationId, syncStatus])
}

// 14. Device Webhook Configuration
model DeviceWebhook {
  id             String @id @default(uuid())
  device         Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  deviceId       String
  organizationId String

  hostId              String // Unique identifier for the webhook host on device
  url                 String // Webhook endpoint URL
  host                String // IP address or hostname
  port                Int // Port number
  eventTypes          String[] // Array of event types to subscribe to
  protocolType        DeviceProtocol      @default(HTTP)
  parameterFormatType ParameterFormatType @default(JSON)

  isActive        Boolean   @default(true)
  createdByUserId String
  lastTriggered   DateTime?
  triggerCount    Int       @default(0)
  lastError       String?
  lastErrorAt     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([deviceId, hostId])
  @@index([organizationId, isActive])
  @@index([deviceId, isActive])
}
